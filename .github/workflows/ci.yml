name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.8, 3.9, '3.10']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8 mypy
        pip install -e ".[dev]"
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Type check with mypy
      run: |
        mypy bitnet_vc_builder
        
    - name: Test with pytest
      run: |
        pytest --cov=bitnet_vc_builder tests/
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build-docs:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx_rtd_theme myst-parser
        pip install -e .
        
    - name: Build documentation
      run: |
        cd docs
        make html
        
    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  build-package:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  build-tauri:
    runs-on: ${{ matrix.os }}
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16
        
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
        
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install gtk+3 webkit2gtk librsvg
        
    - name: Install npm dependencies
      run: |
        cd tauri-ui
        npm install
        
    - name: Build Tauri app
      run: |
        cd tauri-ui
        npm run tauri build
        
    - name: Upload Tauri artifacts
      uses: actions/upload-artifact@v3
      with:
        name: tauri-${{ matrix.os }}
        path: |
          tauri-ui/src-tauri/target/release/bundle/deb/*.deb
          tauri-ui/src-tauri/target/release/bundle/dmg/*.dmg
          tauri-ui/src-tauri/target/release/bundle/msi/*.msi
          tauri-ui/src-tauri/target/release/*.exe
        if-no-files-found: ignore

  release:
    runs-on: ubuntu-latest
    needs: [build-package, build-tauri]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          const glob = require('glob');
          
          const assets = [
            ...glob.sync('dist/*'),
            ...glob.sync('tauri-ubuntu-latest/**/*.deb'),
            ...glob.sync('tauri-windows-latest/**/*.msi'),
            ...glob.sync('tauri-windows-latest/**/*.exe'),
            ...glob.sync('tauri-macos-latest/**/*.dmg')
          ];
          
          for (const asset of assets) {
            const name = asset.split('/').pop();
            const contentType = name.endsWith('.deb') ? 'application/vnd.debian.binary-package' :
                               name.endsWith('.msi') ? 'application/x-msi' :
                               name.endsWith('.exe') ? 'application/vnd.microsoft.portable-executable' :
                               name.endsWith('.dmg') ? 'application/x-apple-diskimage' :
                               name.endsWith('.whl') ? 'application/octet-stream' :
                               name.endsWith('.tar.gz') ? 'application/gzip' :
                               'application/octet-stream';
            
            const content = await fs.readFile(asset);
            
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.create_release.outputs.id }},
              name: name,
              data: content,
              headers: {
                'content-type': contentType,
                'content-length': content.length
              }
            });
          }
